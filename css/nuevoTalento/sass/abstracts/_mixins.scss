// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
    @if $self {
        &,
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    } @else {
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
    #{$context} & {
        @content;
    }
}

@mixin breakpoint($breakpoint) {
    // Get the width from the keyword `$breakpoint`
    // Or `null` if the keyword doesn't exist in `$breakpoints` map
    $value: map-get($breakpoints, $breakpoint);

    // If `$breakpoint` exists as a key in `$breakpoints`
    @if $value != null {
        // Update `$current-breakpoint`
        $current-breakpoint: $breakpoint !global;

        @if $breakpoint == "phone" {
            @media (max-width: $value){
                @content;
            }
        }
        @else if $breakpoint == "desktop"{
            @media (min-width: $value){
                @content;
            }
        }

        // Then reset `$current-breakpoint` to `$default-breakpoint` (root)
        $current-breakpoint: $default-breakpoint !global;
    }

        // If `$breakpoint` doesn't exist in `$breakpoints`,
        // Warn the user and do nothing
    @else {
        @warn "Invalid breakpoint `#{$breakpoint}`.";
    }
}


// This declare a list variable to store all images to preload
$preloaded-images: null;

// This function will append the image or images to $preload-images and returns img path values
@function preload-img($img-path) {
    $output: ();
    @each $img in $img-path {
        $preloaded-images: append($preloaded-images, url($img));
        $output: append($output, image-url($img), comma);
    }
    @return $output;
}
