// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
    @if $self {
        &,
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    } @else {
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
    #{$context} & {
        @content;
    }
}

@mixin breakpoint($breakpoint) {
    // Get the width from the keyword `$breakpoint`
    // Or `null` if the keyword doesn't exist in `$breakpoints` map
    $value: map-get($breakpoints, $breakpoint);

    // If `$breakpoint` exists as a key in `$breakpoints`
    @if $value != null {
        // Update `$current-breakpoint`
        $current-breakpoint: $breakpoint !global;

        // Open a media query block
        @media (min-width: $value ) {
            // Let the user dump content
            @content;
        }

        // Then reset `$current-breakpoint` to `$default-breakpoint` (root)
        $current-breakpoint: $default-breakpoint !global;
    }

        // If `$breakpoint` doesn't exist in `$breakpoints`,
        // Warn the user and do nothing
    @else {
        @warn "Invalid breakpoint `#{$breakpoint}`.";
    }
}


/* NAV STYLES, DESKTOP AND MOBILE  */
@mixin get-nav-from-type($navType:'phone'){
    @if $navType == 'phone' {
        font-family: 'RobotoRegular', sans-serif;
        background-color: $white_alpha20_color;
        display: flex;
        position: fixed;
        flex-direction: column-reverse;
        top: 0;
        right: 0;
        height: 100%;
        z-index: 49;
        width: 300px;
        justify-content: flex-start;
        padding-left: 0;

        .nav_list {
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
            color: cadetblue;
            height: 100%;
            padding: 0;
            -webkit-margin-before: 0;
            -webkit-margin-after: 0;
            overflow: auto;
        }

        .nav_item {
            border-bottom: 1px solid lighten($dark-grey, 60%);
            min-height: 63px;
            display: flex;
            flex-direction: row;
            align-items: center;
            padding-left: 26px;
            color: #444444;
            text-transform: uppercase;
            text-decoration: none;

            &.nav-login {
                color: $brand-outline-color;
                border-bottom: 3px solid $brand-outline-color;
                &:hover{
                    color: $white_alpha20_color;
                }
            }

            &:hover{
                background-color: $brand-alpha-half-color;
            }
        }
    }@else {
        align-items: center;
        display: flex;
        justify-content: space-between;
        width: 100%;
        .nav_list {
            display: flex;
            justify-content: space-around;
            list-style-type: none;

            a {
                text-decoration: none;
                transition: all .5s ease;
            }
        }

        li {
            display: inline-block;
        }
    }
}



// This declare a list variable to store all images to preload
$preloaded-images: null;

// This function will append the image or images to $preload-images and returns img path values
@function preload-img($img-path) {
    $output: ();
    @each $img in $img-path {
        $preloaded-images: append($preloaded-images, url($img));
        $output: append($output, image-url($img), comma);
    }
    @return $output;
}
